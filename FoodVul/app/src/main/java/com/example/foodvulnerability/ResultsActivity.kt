package com.example.foodvulnerability

import android.os.Bundle
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import org.tensorflow.lite.Interpreter
import java.io.FileInputStream
import java.nio.MappedByteBuffer
import java.nio.channels.FileChannel

class ResultsActivity : AppCompatActivity() {
    private lateinit var resultsText: TextView
    private lateinit var regressorInterpreter: Interpreter
    private lateinit var classifierInterpreter: Interpreter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_results)

        resultsText = findViewById(R.id.resultsText)

        // Get input data
        val category = intent.getStringExtra("category") ?: ""
        val productName = intent.getStringExtra("productName") ?: ""
        val ingredients = intent.getStringExtra("ingredients") ?: ""
        val allergenWarning = intent.getStringExtra("allergenWarning") ?: ""

        // Initialize TensorFlow Lite interpreters
        regressorInterpreter = Interpreter(loadModel("model_regressor.tflite"))
        classifierInterpreter = Interpreter(loadModel("model_classifier.tflite"))

        // Process with ML models
        processWithModels(category, productName, ingredients, allergenWarning)
    }

    private fun loadModel(modelPath: String): MappedByteBuffer {
        val fileDescriptor = assets.openFd(modelPath)
        val inputStream = FileInputStream(fileDescriptor.fileDescriptor)
        val fileChannel = inputStream.channel
        val startOffset = fileDescriptor.startOffset
        val declaredLength = fileDescriptor.declaredLength
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength)
    }

    private fun preprocessInput(
        category: String,
        productName: String,
        ingredients: String,
        allergenWarning: String
    ): FloatArray {
        // Example preprocessing logic
        // Convert categorical inputs to numerical representations if necessary
        // Normalize or standardize data as required by your model

        // This is a placeholder; you should replace this with your actual preprocessing logic
        return floatArrayOf(0.0f, 0.0f) // Adjust based on your input requirements
    }

    private fun processWithModels(
        category: String,
        productName: String,
        ingredients: String,
        allergenWarning: String
    ) {
        try {
            // Preprocess input data
            val processedInput = preprocessInput(category, productName, ingredients, allergenWarning)

            // Prepare input and output buffers for predictions
            val inputArray = arrayOf(processedInput) // Adjust shape as necessary
            val regressorOutput = Array(1) { FloatArray(1) } // Adjust dimensions based on your regressor model
            val classifierOutput = Array(1) { FloatArray(1) } // Adjust dimensions based on your classifier model

            // Run inference
            regressorInterpreter.run(inputArray, regressorOutput)
            classifierInterpreter.run(inputArray, classifierOutput)

            // Process the results
            val regressionResult = regressorOutput[0][0] // Example to extract output
            val classificationResult = classifierOutput[0][0] // Example to extract output

            // Display results in TextView
            resultsText.text = "Category: $category\n" +
                    "Product: $productName\n" +
                    "Ingredients: $ingredients\n" +
                    "Allergen Warning: $allergenWarning\n\n" +
                    "Regression Prediction: $regressionResult\n" +
                    "Classification Prediction: ${if (classificationResult > 0.5) "Yes" else "No"}"

        } catch (e: Exception) {
            resultsText.text = "Error processing models: ${e.message}"
        }
    }


    private fun displayResults(healthAndVulnerability: FloatArray, impact: Float) {
        val resultText = """
            Health Benefits: ${healthAndVulnerability[0]}
            Vulnerability: ${healthAndVulnerability[1]}
            Impact: $impact
        """.trimIndent()

        resultsText.text = resultText
    }

    override fun onDestroy() {
        super.onDestroy()
        // Close interpreters to free resources
        regressorInterpreter.close()
        classifierInterpreter.close()
    }
}
